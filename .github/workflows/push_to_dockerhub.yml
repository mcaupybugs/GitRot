name: Push to Docker Hub

on:
  push:
    branches:
      - main # Production builds on main branch
      - develop # Development builds on develop branch
    tags:
      - "v*" # Version tags (v1.0.0, v1.1.0, etc.)
  pull_request:
    branches:
      - main
      - develop

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: gitrot

jobs:
  # Development Build Job
  build-dev:
    name: Build & Push Development Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'pull_request' && github.base_ref == 'develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for development
        id: meta-dev
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-dev
            type=ref,event=pr,suffix=-dev-pr
            type=sha,prefix=dev-,format=short
          labels: |
            org.opencontainers.image.title=GitRot Development
            org.opencontainers.image.description=GitRot README Generator - Development Build
            org.opencontainers.image.vendor=GitRot Team

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          labels: ${{ steps.meta-dev.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update development deployment status
        if: success()
        run: |
          echo "‚úÖ Development image successfully pushed to Docker Hub"
          echo "üê≥ Image: ${{ steps.meta-dev.outputs.tags }}"

  # Production Build Job
  build-prod:
    name: Build & Push Production Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for production
        id: meta-prod
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=prod-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=GitRot Production
            org.opencontainers.image.description=GitRot README Generator - Production Build
            org.opencontainers.image.vendor=GitRot Team

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-prod.outputs.tags }}
          labels: ${{ steps.meta-prod.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Update production deployment status
        if: success()
        run: |
          echo "‚úÖ Production image successfully pushed to Docker Hub"
          echo "üê≥ Image: ${{ steps.meta-prod.outputs.tags }}"

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-dev, build-prod]
    if: always() && (needs.build-dev.result == 'success' || needs.build-prod.result == 'success')

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Deployment Notification Job
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-dev, build-prod]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build-dev.result }}" == "success" ]]; then
            echo "üéâ Development build completed successfully!"
          fi

          if [[ "${{ needs.build-prod.result }}" == "success" ]]; then
            echo "üöÄ Production build completed successfully!"
          fi

          if [[ "${{ needs.build-dev.result }}" == "failure" || "${{ needs.build-prod.result }}" == "failure" ]]; then
            echo "‚ùå Build failed. Please check the logs."
            exit 1
          fi
